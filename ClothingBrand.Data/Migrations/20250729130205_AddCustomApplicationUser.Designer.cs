// <auto-generated />
using System;
using ClothingBrandApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClothingBrand.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250729130205_AddCustomApplicationUser")]
    partial class AddCustomApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUserProduct", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the reference Application User.");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the reference Product.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if ApplicationUserProduct entry is deleted");

                    b.HasKey("ApplicationUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ApplicationUserId", "ProductId");

                    b.ToTable("ApplicationUserProducts", t =>
                        {
                            t.HasComment("User's favorite products");
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUserShoppingCart", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the reference Application User.");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the reference Item in Shopping Cart.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if ApplicationUserShoppingCart entry is deleted");

                    b.HasKey("ApplicationUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ApplicationUserId", "ProductId");

                    b.ToTable("ApplicationUserShoppingCarts", t =>
                        {
                            t.HasComment("User's products in shopping cart");
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hoodies"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jackets"
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Gender identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Gender name");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kids"
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Manager's user entity");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Manager in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("080b12b6-84ab-4a23-908c-6f1835b768f9"),
                            IsDeleted = false,
                            UserId = "a7924356-9a80-4206-963b-e71abcfa6257"
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Product category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product description");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Product gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasComment("Product ImageUrl");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit")
                        .HasComment("Product availability");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if product is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Product size");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product warehouse identifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b11102f8-0087-48d1-a0ec-1d4589534f5f"),
                            CategoryId = 1,
                            Description = "Шорти за плуване 'TORTUGA' в Сапфирено Синьо",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/0ef96422cf975be04a5bdcd1a2a2de64.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "HUGO",
                            Price = 137.90m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("08c7d54f-3bed-47fa-9e9e-1dec63777379"),
                            CategoryId = 1,
                            Description = "Ниски маратонки 'AIR VAPORMAX 2025 FK' в Бяло",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/2cb972f1b098663ca57e788fbc4454e1.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Nike AIR VAPORMAX 2025 FK",
                            Price = 449.99m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("e8e1f0c5-7899-41bc-812f-2152d5863ac3"),
                            CategoryId = 1,
                            Description = "Jordan Топ в Белозелено",
                            GenderId = 3,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/40b72261e9c78c31f107663d8e72f6e5.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Jordan",
                            Price = 33.90m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("0eaa7866-63ca-4d5a-ae89-2615d257f7b7"),
                            CategoryId = 1,
                            Description = "Много скъпи очила!!!",
                            GenderId = 1,
                            ImageUrl = "https://us.louisvuitton.com/images/is/image/lv/1/PP_VP_L/louis-vuitton-lv-waimea-sunglasses--Z1082W_PM2_Front%20view.png?wid=1300&hei=1300",
                            InStock = true,
                            IsDeleted = false,
                            Name = "LV Waimea Sunglasses",
                            Price = 1200.00m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("f9ad6395-d567-47f4-805d-47337c727a62"),
                            CategoryId = 1,
                            Description = "Функционална тениска 'Real Madrid 24/25 Home' в Бяло",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/c2a7188bdb6e7fbfc4132268053a7fd2.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "ADIDAS PERFORMANCE",
                            Price = 12.90m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("649376a6-1b91-4088-9d03-43231c1e1e07"),
                            CategoryId = 1,
                            Description = "Чанта през рамо Lady Re от еко кожа с капаче",
                            GenderId = 3,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/81651/81650611/images/res_43f38159b521f5bb18962d621bbb9acf.jpg?s=Fqg_alMTNmSM",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Valentino",
                            Price = 119.99m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("464b24c7-5f7d-40fc-9acf-4e365a6dd9d8"),
                            CategoryId = 1,
                            Description = "Десенирани шорти с връзка",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/84294/84293608/images/res_91fd90296f0a5aa87b99e56a973f2d38.jpg?s=54y_UYYifK2H",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Pepe Jeans London",
                            Price = 97.99m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("18a6b861-4adf-45b5-9a5e-9f4e6a3d6b9a"),
                            CategoryId = 1,
                            Description = "Чехли за плаж/баня 'Y BASE CAMP SLIDE III' в Черно",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/24f57483a6801e9688af452bb6a85db4.jpg?brightness=0.96&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "THE NORTH FACE",
                            Price = 54.90m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("186ab6b1-a4df-45b5-9a5e-68f6625cfba0"),
                            CategoryId = 1,
                            Description = "Унисекс чехли с лого",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/85054/85053442/images/res_7e715b1bccef60387dc819aca31b8c47.jpg?s=V7efhJcc4Qme",
                            InStock = true,
                            IsDeleted = false,
                            Name = "EA7",
                            Price = 89.99m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("e59205cb-b689-47f7-b442-790fad17251a"),
                            CategoryId = 1,
                            Description = " Шорти за плуване 'DAISE' в Черно",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/5e2fdb666ae4e2a31c81a4bffbe31a22.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "HUGO",
                            Price = 139.90m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("ccf9d86b-2bc9-4efe-87a6-a0fefe4050e7"),
                            CategoryId = 1,
                            Description = "Polo Ralph Lauren Раница в Розово",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/5433cf6d338be1ab629b9d598e14f44d.jpeg?brightness=0.96&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Polo Ralph Lauren",
                            Price = 147.90m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("86cd4677-5577-43f3-870e-c3fda2b0f5c3"),
                            CategoryId = 1,
                            Description = "Adidas x Disney Lilo & Stitch' в Синьо, Аквамарин",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/28ba60633e1247fd11b3687ef439a41d.jpg?brightness=0.96&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "ADIDAS SPORTSWEAR Облекло за трениране",
                            Price = 61.90m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("ba2224ae-1835-441f-b54f-d7e2856ce8a0"),
                            CategoryId = 1,
                            Description = "Бляскав горен бански с едно рамо",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/95610/95609240/images/res_0c084253550c278fc32e1c088c5ef460.jpg?s=QUOcA1E0pB6y",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Penti",
                            Price = 54.59m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("e6da177b-d0fb-427e-b8fb-dc435616a4f9"),
                            CategoryId = 1,
                            Description = "Чехли с лого",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/80537/80536412/images/res_3335887410769334759b95010994a7c3.jpg?s=wz3s7X8KN8k7",
                            InStock = true,
                            IsDeleted = false,
                            Name = "Versace Jeans Couture",
                            Price = 117.99m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("fe321e1b-230f-4ec9-be54-de90f54b6fff"),
                            CategoryId = 1,
                            Description = "Мрежеста блуза",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/77201/77200042/images/res_529f67339ae7f93a3a17566b99791715.jpg?s=nZI5QJK8Fgof",
                            InStock = true,
                            IsDeleted = false,
                            Name = "June",
                            Price = 19.99m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("2e838ab5-52ff-46ba-a861-f12cce0310ae"),
                            CategoryId = 1,
                            Description = "Мрежести плувни шорти",
                            GenderId = 1,
                            ImageUrl = "https://fdcdn.akamaized.net/m/780x1170/products/93445/93444094/images/res_a36898790e947d077042c677224b2504.jpg?s=0mFGRsrsUX4x",
                            InStock = true,
                            IsDeleted = false,
                            Name = "GRIMELANGE",
                            Price = 20.99m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("3621b665-03bb-4520-9ab6-fc9dfa8f1e5a"),
                            CategoryId = 1,
                            Description = "'Adilette Lite' в Пепел От Рози",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/105a3c9dd2a020437a2a92db53555977.jpg?brightness=0.96&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "ADIDAS ORIGINALS Чехли",
                            Price = 61.90m,
                            Size = "S",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        },
                        new
                        {
                            Id = new Guid("eb05338b-c86e-4171-b1a7-fcb601b6fe43"),
                            CategoryId = 1,
                            Description = "ELLESSE Шорти за плуване 'Distoria' в Черно",
                            GenderId = 1,
                            ImageUrl = "https://cdn.aboutstatic.com/file/images/dc1384a259d059709daf241ba637493e.png?bg=F4F4F5&quality=75&trim=1&height=1280&width=960",
                            InStock = true,
                            IsDeleted = false,
                            Name = "ELLESSE",
                            Price = 89.90m,
                            Size = "M",
                            WarehouseId = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20")
                        });
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if warehouse is deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Warehouse location");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse's manager");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Warehouse name");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af5efb50-807c-4dfd-8178-71c7d6ff7f20"),
                            IsDeleted = false,
                            Location = "Veliko Turnovo",
                            ManagerId = new Guid("080b12b6-84ab-4a23-908c-6f1835b768f9"),
                            Name = "Veliko Turnovo Warehouse"
                        },
                        new
                        {
                            Id = new Guid("5aa828b1-7b16-4cc1-92f6-fa0a89d250da"),
                            IsDeleted = false,
                            Location = "Sofia",
                            ManagerId = new Guid("080b12b6-84ab-4a23-908c-6f1835b768f9"),
                            Name = "Sofia Warehouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUserProduct", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserFavoriteProducts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingBrand.Data.Models.Product", "Product")
                        .WithMany("UserFavorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUserShoppingCart", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserShoppingCartProducts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingBrand.Data.Models.Product", "Product")
                        .WithMany("UserShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Manager", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", "User")
                        .WithOne("Manager")
                        .HasForeignKey("ClothingBrand.Data.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Product", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingBrand.Data.Models.Gender", "Gender")
                        .WithMany("Products")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClothingBrand.Data.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Gender");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Warehouse", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.Manager", "Manager")
                        .WithMany("ManagedWarehouses")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClothingBrand.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserFavoriteProducts");

                    b.Navigation("Manager");

                    b.Navigation("UserShoppingCartProducts");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Gender", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Manager", b =>
                {
                    b.Navigation("ManagedWarehouses");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Product", b =>
                {
                    b.Navigation("UserFavorites");

                    b.Navigation("UserShoppingCartItems");
                });

            modelBuilder.Entity("ClothingBrand.Data.Models.Warehouse", b =>
                {
                    b.Navigation("WarehouseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
